{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\__Project\\\\SoccerStat\\\\soccer-stat-app\\\\src\\\\pages\\\\LeagueCalendar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { getLeague } from './../requests/getData';\nimport Loading from \"../components/Loading\";\nimport SportsSoccerIcon from '@material-ui/icons/SportsSoccer';\nimport TableLeagueMatches from \"../components/TableLeagueMatches\";\nimport CustomSelect from \"../components/Select\";\nimport { connect } from \"react-redux\";\nimport { getErrorMessage, nullifyErrorMessage, nullifyYearSeason, getDateFromTo, nullifyDateFromTo } from \"../redux/actions\";\nimport CustomDatePicker from \"../components/DatePicker\";\n\nconst LeagueCalendar = props => {\n  _s();\n\n  const {\n    season,\n    getErrorMessage,\n    nullifyErrorMessage,\n    errorMessage,\n    nullifyYearSeason\n  } = props;\n  const [league, setLeague] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [count, setCount] = useState(\"\");\n  const [id, setId] = useState('');\n  const [yearSeason, setYearSeason] = useState('');\n  const history = useHistory();\n\n  const getMatches = (idLeague, seasonLeague) => {\n    let year = '';\n\n    if (seasonLeague) {\n      year = seasonLeague;\n    }\n\n    try {\n      getLeague(idLeague, year).then(result => {\n        if (result.message) {\n          return getErrorMessage(result.message);\n        }\n\n        const matches = result.matches.map(item => {\n          return {\n            id: item.id,\n            awayTeam: item.awayTeam.name,\n            homeTeam: item.homeTeam.name,\n            winner: item.score.winner,\n            startDate: item.season.startDate,\n            endDate: item.season.endDate,\n            status: item.status\n          };\n        });\n        nullifyErrorMessage();\n        setLeague(matches);\n        setTitle(result.competition.name);\n        setCount(result.count);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setYearSeason('');\n    const id = history.location.pathname.substr(9);\n    const seasonId = history.location.search.substr(-4);\n    console.log('history.location.search.length ', history.location.search.length);\n\n    if (history.location.search.length) {\n      setYearSeason(history.location.search.substr(-4));\n    } else {\n      setYearSeason('');\n    } // setId(id)\n\n\n    if (id && seasonId) {\n      getMatches(id, seasonId);\n    } else if (id && season) {\n      getMatches(id, season);\n    } else if (id) {\n      getMatches(id);\n    }\n  }, [season]);\n  console.log('yearSeason ', yearSeason);\n  console.log('season ', season);\n\n  if (!league && !errorMessage) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SportsSoccerIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [title, \" - \", errorMessage ? 0 : count, \" \\u043C\\u0430\\u0442\\u0447\\u0435\\u0439\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => event.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(CustomSelect, {\n        startValue: yearSeason ? yearSeason : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginTop: \"0\"\n      },\n      children: \"\\u0438\\u043B\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CustomDatePicker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this), errorMessage ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        marginTop: '50px'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }, this) : /*#__PURE__*/_jsxDEV(TableLeagueMatches, {\n      dataTable: league\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LeagueCalendar, \"g90Em+BBgsbZwvVnRUcd0zdzH0M=\", false, function () {\n  return [useHistory];\n});\n\n_c = LeagueCalendar;\n\nconst mapStateToProps = state => ({\n  loading: state.app.loading,\n  season: state.leagues.season,\n  errorMessage: state.leagues.errorMessage,\n  dateFromTo: state.leagues.dateFromTo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getErrorMessage: response => dispatch(getErrorMessage(response)),\n    nullifyErrorMessage: () => dispatch(nullifyErrorMessage()),\n    nullifyYearSeason: () => dispatch(nullifyYearSeason()),\n    getDateFromTo: respons => dispatch(getDateFromTo(respons)),\n    nullifyDateFromTo: () => dispatch(nullifyDateFromTo())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeagueCalendar);\n\nvar _c;\n\n$RefreshReg$(_c, \"LeagueCalendar\");","map":{"version":3,"sources":["D:/__Project/SoccerStat/soccer-stat-app/src/pages/LeagueCalendar.tsx"],"names":["React","useState","useEffect","useHistory","getLeague","Loading","SportsSoccerIcon","TableLeagueMatches","CustomSelect","connect","getErrorMessage","nullifyErrorMessage","nullifyYearSeason","getDateFromTo","nullifyDateFromTo","CustomDatePicker","LeagueCalendar","props","season","errorMessage","league","setLeague","title","setTitle","count","setCount","id","setId","yearSeason","setYearSeason","history","getMatches","idLeague","seasonLeague","year","then","result","message","matches","map","item","awayTeam","name","homeTeam","winner","score","startDate","endDate","status","competition","error","console","log","location","pathname","substr","seasonId","search","length","event","preventDefault","marginTop","mapStateToProps","state","loading","app","leagues","dateFromTo","mapDispatchToProps","dispatch","response","respons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getLeague } from './../requests/getData';\r\nimport Loading from \"../components/Loading\";\r\nimport SportsSoccerIcon from '@material-ui/icons/SportsSoccer';\r\nimport TableLeagueMatches from \"../components/TableLeagueMatches\";\r\nimport CustomSelect from \"../components/Select\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n\tgetErrorMessage,\r\n\tnullifyErrorMessage,\r\n\tnullifyYearSeason,\r\n\tgetDateFromTo,\r\n\tnullifyDateFromTo\r\n} from \"../redux/actions\";\r\nimport CustomDatePicker from \"../components/DatePicker\";\r\n\r\n\r\nexport interface matchesInterface {\r\n\t[x: string]: any;\r\n\tid: number | string,\r\n\tawayTeam: any,\r\n\thomeTeam: any,\r\n\twinner: string,\r\n\tendDate: string,\r\n\tstartDate: string,\r\n\tstatus: string\r\n}\r\n\r\nconst LeagueCalendar = (props: any) => {\r\n\r\n\tconst { season, getErrorMessage, nullifyErrorMessage, errorMessage, nullifyYearSeason } = props\r\n\r\n\tconst [league, setLeague] = useState(\"\")\r\n\tconst [title, setTitle] = useState(\"\")\r\n\tconst [count, setCount] = useState(\"\")\r\n\tconst [id, setId] = useState('')\r\n\tconst [yearSeason, setYearSeason] = useState('')\r\n\r\n\r\n\tconst history = useHistory()\r\n\r\n\tconst getMatches = (idLeague: any, seasonLeague?: any) => {\r\n\t\tlet year = '';\r\n\r\n\t\tif (seasonLeague) {\r\n\t\t\tyear = seasonLeague;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tgetLeague(idLeague, year).then(result => {\r\n\t\t\t\tif (result.message) {\r\n\t\t\t\t\treturn getErrorMessage(result.message);\r\n\t\t\t\t}\r\n\t\t\t\tconst matches = result.matches.map((item: matchesInterface) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: item.id,\r\n\t\t\t\t\t\tawayTeam: item.awayTeam.name,\r\n\t\t\t\t\t\thomeTeam: item.homeTeam.name,\r\n\t\t\t\t\t\twinner: item.score.winner,\r\n\t\t\t\t\t\tstartDate: item.season.startDate,\r\n\t\t\t\t\t\tendDate: item.season.endDate,\r\n\t\t\t\t\t\tstatus: item.status\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tnullifyErrorMessage()\r\n\t\t\t\tsetLeague(matches)\r\n\t\t\t\tsetTitle(result.competition.name)\r\n\t\t\t\tsetCount(result.count)\r\n\t\t\t})\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetYearSeason('')\r\n\t\tconst id = history.location.pathname.substr(9)\r\n\t\tconst seasonId = history.location.search.substr(-4);\r\n\r\n\t\tconsole.log('history.location.search.length ', history.location.search.length);\r\n\r\n\t\tif (history.location.search.length) {\r\n\t\t\tsetYearSeason(history.location.search.substr(-4))\r\n\t\t} else {\r\n\t\t\tsetYearSeason('')\r\n\t\t}\r\n\t\t// setId(id)\r\n\r\n\t\tif (id && seasonId) {\r\n\t\t\tgetMatches(id, seasonId);\r\n\t\t} else if (id && season) {\r\n\t\t\tgetMatches(id, season);\r\n\t\t} else if (id) {\r\n\t\t\tgetMatches(id);\r\n\t\t}\r\n\t}, [season])\r\n\r\n\tconsole.log('yearSeason ', yearSeason)\r\n\tconsole.log('season ', season)\r\n\r\n\r\n\tif (!league && !errorMessage) {\r\n\t\treturn <Loading />\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>{title ? <><SportsSoccerIcon /> <span>{title} - {errorMessage ? 0 : count} матчей</span></> : \"\"}</h1>\r\n\t\t\t<form onSubmit={(event) => event.preventDefault()}>\r\n\t\t\t\t<CustomSelect startValue={yearSeason ? yearSeason : \"\"} />\r\n\t\t\t</form>\r\n\t\t\t<h3 style={{ marginTop: \"0\" }}>или</h3>\r\n\t\t\t<CustomDatePicker />\r\n\t\t\t{\r\n\t\t\t\terrorMessage\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<h1 style={{ marginTop: '50px' }}>{errorMessage}</h1>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t< TableLeagueMatches dataTable={league} />\r\n\t\t\t}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tloading: state.app.loading,\r\n\tseason: state.leagues.season,\r\n\terrorMessage: state.leagues.errorMessage,\r\n\tdateFromTo: state.leagues.dateFromTo,\r\n})\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n\treturn {\r\n\t\tgetErrorMessage: (response: string) => dispatch(getErrorMessage(response)),\r\n\t\tnullifyErrorMessage: () => dispatch(nullifyErrorMessage()),\r\n\t\tnullifyYearSeason: () => dispatch(nullifyYearSeason()),\r\n\t\tgetDateFromTo: (respons: object) => dispatch(getDateFromTo(respons)),\r\n\t\tnullifyDateFromTo: () => dispatch(nullifyDateFromTo()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeagueCalendar);"]},"metadata":{},"sourceType":"module"}