{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\__Project\\\\SoccerStat\\\\soccer-stat-app\\\\src\\\\components\\\\DatePicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { connect } from 'react-redux';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { nullifyDateFromTo, getDateFromTo } from '../redux/actions';\n\nconst CustomDatePicker = props => {\n  _s();\n\n  const {\n    nullifyDateFromTo,\n    getDateFromTo,\n    dateFromTo,\n    starDateFromTo\n  } = props;\n  const [resetDate, setResetDate] = useState({\n    dateFrom: '2021-01-15',\n    dateTo: new Date()\n  });\n  let startDate = new Date('2021-01-15');\n  let andDate = new Date();\n\n  if (starDateFromTo.dateTo && starDateFromTo.dateFrom) {\n    startDate = new Date(starDateFromTo.dateTo);\n    andDate = new Date(starDateFromTo.dateFrom);\n  }\n\n  if (!dateFromTo.dateTo && !dateFromTo.dateFrom && !starDateFromTo.dateTo && !starDateFromTo.dateFrom) {\n    getDateFromTo({\n      startDate: new Date('2021-01-15'),\n      andDate: new Date()\n    });\n  }\n\n  console.log('starDateFromTo ', starDateFromTo);\n  const [selectedDateFrom, handleDateFromChange] = useState(startDate);\n  const [selectedDateTo, handleDateToChange] = useState(andDate);\n\n  function formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  } // console.log('selectedDateTo  typeof ', typeof (selectedDateTo))\n\n\n  useEffect(() => {\n    console.log('selectedDateTo formatDate() ', formatDate(selectedDateTo));\n    let from = formatDate(selectedDateFrom);\n    let to = formatDate(selectedDateTo);\n\n    if (from !== 'NaN-NaN-NaN' && to !== \"NaN-NaN-NaN\" && from !== undefined && to !== undefined) {\n      console.log('from ', from);\n      console.log('to ', to);\n      getDateFromTo({\n        dateFrom: from,\n        dateTo: to\n      });\n    }\n  }, [selectedDateFrom, selectedDateTo, starDateFromTo.dateTo, starDateFromTo.dateFrom]);\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-pickers-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n        autoOk: true,\n        variant: \"inline\",\n        label: \"date from\",\n        format: \"yyyy-MM-dd\",\n        value: selectedDateFrom,\n        InputAdornmentProps: {\n          position: \"start\"\n        },\n        onChange: date => handleDateFromChange(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n        autoOk: true,\n        variant: \"inline\",\n        label: \"date to\",\n        format: \"yyyy-MM-dd\",\n        value: selectedDateTo,\n        InputAdornmentProps: {\n          position: \"start\"\n        },\n        onChange: date => handleDateToChange(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomDatePicker, \"7KfO2pqQJ3dmW8qcNf9msFwoCU4=\");\n\n_c = CustomDatePicker;\n\nconst mapStateToProps = state => {\n  return {\n    dateFromTo: state.leagues.dateFromTo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getDateFromTo: respons => dispatch(getDateFromTo(respons)),\n    nullifyDateFromTo: () => dispatch(nullifyDateFromTo())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDatePicker);\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDatePicker\");","map":{"version":3,"sources":["D:/__Project/SoccerStat/soccer-stat-app/src/components/DatePicker.tsx"],"names":["React","useState","useEffect","DateFnsUtils","connect","KeyboardDatePicker","MuiPickersUtilsProvider","nullifyDateFromTo","getDateFromTo","CustomDatePicker","props","dateFromTo","starDateFromTo","resetDate","setResetDate","dateFrom","dateTo","Date","startDate","andDate","console","log","selectedDateFrom","handleDateFromChange","selectedDateTo","handleDateToChange","formatDate","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","from","to","undefined","position","mapStateToProps","state","leagues","mapDispatchToProps","dispatch","respons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers';\r\nimport { nullifyDateFromTo, getDateFromTo } from '../redux/actions';\r\n\r\nconst CustomDatePicker = (props: any) => {\r\n\r\n  const { nullifyDateFromTo, getDateFromTo, dateFromTo, starDateFromTo } = props;\r\n\r\n\r\n  const [resetDate, setResetDate] = useState({ dateFrom: '2021-01-15', dateTo: new Date() })\r\n\r\n\r\n  let startDate = new Date('2021-01-15')\r\n  let andDate = new Date()\r\n\r\n  if (starDateFromTo.dateTo && starDateFromTo.dateFrom) {\r\n    startDate = new Date(starDateFromTo.dateTo)\r\n    andDate = new Date(starDateFromTo.dateFrom)\r\n  }\r\n  if (!dateFromTo.dateTo && !dateFromTo.dateFrom && !starDateFromTo.dateTo && !starDateFromTo.dateFrom) {\r\n    getDateFromTo({\r\n      startDate: new Date('2021-01-15'),\r\n      andDate: new Date()\r\n    })\r\n  }\r\n\r\n  console.log('starDateFromTo ', starDateFromTo)\r\n  const [selectedDateFrom, handleDateFromChange] = useState<any>(startDate);\r\n  const [selectedDateTo, handleDateToChange] = useState<any>(andDate);\r\n\r\n\r\n  function formatDate(date: any) {\r\n    var d = new Date(date),\r\n      month = '' + (d.getMonth() + 1),\r\n      day = '' + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2)\r\n      month = '0' + month;\r\n    if (day.length < 2)\r\n      day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n  }\r\n\r\n\r\n  // console.log('selectedDateTo  typeof ', typeof (selectedDateTo))\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    console.log('selectedDateTo formatDate() ', formatDate(selectedDateTo))\r\n\r\n    let from = formatDate(selectedDateFrom)\r\n    let to = formatDate(selectedDateTo)\r\n\r\n    if (from !== 'NaN-NaN-NaN' && to !== \"NaN-NaN-NaN\" && from !== undefined && to !== undefined) {\r\n      console.log('from ', from);\r\n      console.log('to ', to);\r\n\r\n      getDateFromTo({\r\n        dateFrom: from,\r\n        dateTo: to\r\n      })\r\n    }\r\n\r\n  }, [selectedDateFrom, selectedDateTo, starDateFromTo.dateTo, starDateFromTo.dateFrom]);\r\n\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n      <div className=\"date-pickers-wrap\">\r\n        <KeyboardDatePicker\r\n          autoOk\r\n          variant=\"inline\"\r\n          label=\"date from\"\r\n          format=\"yyyy-MM-dd\"\r\n          value={selectedDateFrom}\r\n          InputAdornmentProps={{ position: \"start\" }}\r\n          onChange={(date: any) => handleDateFromChange(date)}\r\n        />\r\n        <KeyboardDatePicker\r\n          autoOk\r\n          variant=\"inline\"\r\n          label=\"date to\"\r\n          format=\"yyyy-MM-dd\"\r\n          value={selectedDateTo}\r\n          InputAdornmentProps={{ position: \"start\" }}\r\n          onChange={(date: any) => handleDateToChange(date)}\r\n        />\r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    dateFromTo: state.leagues.dateFromTo,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getDateFromTo: (respons: object) => dispatch(getDateFromTo(respons)),\r\n    nullifyDateFromTo: () => dispatch(nullifyDateFromTo()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDatePicker)"]},"metadata":{},"sourceType":"module"}