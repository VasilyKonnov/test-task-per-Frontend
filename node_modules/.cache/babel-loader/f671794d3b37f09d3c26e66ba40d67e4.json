{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\__Project\\\\SoccerStat\\\\soccer-stat-app\\\\src\\\\components\\\\DatePicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { connect } from 'react-redux';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { nullifyDateFromTo } from '../redux/actions';\nimport { getDateFromTo } from './../redux/actions';\n\nconst CustomDatePicker = props => {\n  _s();\n\n  const {\n    nullifyDateFromTo,\n    getDateFromTo,\n    dateFromTo\n  } = props;\n  const [selectedDateFrom, handleDateFromChange] = useState(new Date('2021-01-15'));\n  const [selectedDateTo, handleDateToChange] = useState(new Date());\n\n  function formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  } // console.log('selectedDateTo  typeof ', typeof (selectedDateTo))\n\n\n  console.log('selectedDateTo formatDate() ', formatDate(selectedDateTo));\n  useEffect(() => {\n    if (selectedDateFrom.toISOString().substr(0, 10) && selectedDateTo.toISOString().substr(0, 10)) {\n      let from = selectedDateFrom.toISOString().substr(0, 10);\n      let to = selectedDateTo.toISOString().substr(0, 10);\n\n      if (from.length === 10 && to.length === 10) {\n        getDateFromTo({\n          dateFrom: from,\n          dateTo: to\n        });\n      }\n    }\n  }, [selectedDateFrom, selectedDateTo]);\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-pickers-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n        autoOk: true,\n        variant: \"inline\",\n        label: \"date from\",\n        format: \"yyyy-MM-dd\",\n        value: selectedDateFrom,\n        InputAdornmentProps: {\n          position: \"start\"\n        },\n        onChange: date => handleDateFromChange(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n        autoOk: true,\n        variant: \"inline\",\n        label: \"date to\",\n        format: \"yyyy-MM-dd\",\n        value: selectedDateTo,\n        InputAdornmentProps: {\n          position: \"start\"\n        },\n        onChange: date => handleDateToChange(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomDatePicker, \"Zd2tpJgjbm19+BolSEDNRtOOjdA=\");\n\n_c = CustomDatePicker;\n\nconst mapStateToProps = state => {\n  return {\n    dateFromTo: state.leagues.dateFromTo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getDateFromTo: respons => dispatch(getDateFromTo(respons)),\n    nullifyDateFromTo: () => dispatch(nullifyDateFromTo())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDatePicker);\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDatePicker\");","map":{"version":3,"sources":["D:/__Project/SoccerStat/soccer-stat-app/src/components/DatePicker.tsx"],"names":["React","useState","useEffect","DateFnsUtils","connect","KeyboardDatePicker","MuiPickersUtilsProvider","nullifyDateFromTo","getDateFromTo","CustomDatePicker","props","dateFromTo","selectedDateFrom","handleDateFromChange","Date","selectedDateTo","handleDateToChange","formatDate","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","console","log","toISOString","substr","from","to","dateFrom","dateTo","position","mapStateToProps","state","leagues","mapDispatchToProps","dispatch","respons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers';\r\nimport { nullifyDateFromTo } from '../redux/actions';\r\nimport { getDateFromTo } from './../redux/actions';\r\nimport { ColorLensOutlined } from '@material-ui/icons';\r\n\r\nconst CustomDatePicker = (props: any) => {\r\n\r\n  const { nullifyDateFromTo, getDateFromTo, dateFromTo } = props;\r\n  const [selectedDateFrom, handleDateFromChange] = useState<any>(new Date('2021-01-15'));\r\n  const [selectedDateTo, handleDateToChange] = useState<any>(new Date());\r\n\r\n  function formatDate(date: any) {\r\n    var d = new Date(date),\r\n      month = '' + (d.getMonth() + 1),\r\n      day = '' + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2)\r\n      month = '0' + month;\r\n    if (day.length < 2)\r\n      day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n  }\r\n\r\n\r\n  // console.log('selectedDateTo  typeof ', typeof (selectedDateTo))\r\n  console.log('selectedDateTo formatDate() ', formatDate(selectedDateTo))\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (selectedDateFrom.toISOString().substr(0, 10) && selectedDateTo.toISOString().substr(0, 10)) {\r\n      let from = selectedDateFrom.toISOString().substr(0, 10)\r\n      let to = selectedDateTo.toISOString().substr(0, 10)\r\n      if (from.length === 10 && to.length === 10) {\r\n        getDateFromTo({\r\n          dateFrom: from,\r\n          dateTo: to\r\n        })\r\n      }\r\n    }\r\n\r\n  }, [selectedDateFrom, selectedDateTo]);\r\n\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n      <div className=\"date-pickers-wrap\">\r\n        <KeyboardDatePicker\r\n          autoOk\r\n          variant=\"inline\"\r\n          label=\"date from\"\r\n          format=\"yyyy-MM-dd\"\r\n          value={selectedDateFrom}\r\n          InputAdornmentProps={{ position: \"start\" }}\r\n          onChange={(date: any) => handleDateFromChange(date)}\r\n        />\r\n        <KeyboardDatePicker\r\n          autoOk\r\n          variant=\"inline\"\r\n          label=\"date to\"\r\n          format=\"yyyy-MM-dd\"\r\n          value={selectedDateTo}\r\n          InputAdornmentProps={{ position: \"start\" }}\r\n          onChange={(date: any) => handleDateToChange(date)}\r\n        />\r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    dateFromTo: state.leagues.dateFromTo,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getDateFromTo: (respons: object) => dispatch(getDateFromTo(respons)),\r\n    nullifyDateFromTo: () => dispatch(nullifyDateFromTo()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDatePicker)"]},"metadata":{},"sourceType":"module"}