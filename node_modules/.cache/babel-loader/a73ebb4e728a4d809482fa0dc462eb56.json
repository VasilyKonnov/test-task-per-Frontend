{"ast":null,"code":"import { URL_LEAGUES, URL_COMANDS, API_TOKEN, TARIF } from \"../constants\"; // TODO: Убрать все консоль-логи\n\nexport const getLeagues = async () => {\n  const response = await fetch(`${URL_LEAGUES}${TARIF}`, {\n    method: 'GET',\n    headers: {\n      'X-Auth-Token': API_TOKEN\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return data;\n  }).then(result => {\n    const leagues = result.competitions.map(item => {\n      return {\n        id: item.id,\n        name: item.name\n      };\n    });\n    return leagues;\n  });\n  return await response;\n};\nexport const getMatches = async (url, id, year, dateFromTo) => {\n  let filterYear = '';\n  let filterDateFromTo = '';\n\n  if (year) {\n    console.log('getLeague year ', year);\n    filterYear = `?season=${year}`;\n  }\n\n  if (dateFromTo) {\n    filterDateFromTo = `?dateFrom=${dateFromTo.dateFrom}&dateTo=${dateFromTo.dateTo}`;\n  }\n\n  const response = await fetch(`${url}${id}/matches${filterYear}${filterDateFromTo}`, {\n    method: 'GET',\n    headers: {\n      'X-Auth-Token': API_TOKEN\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return data;\n  });\n  return await response;\n};\nexport const getTeams = async () => {\n  const response = await fetch(`${URL_COMANDS}${TARIF}`, {\n    method: 'GET',\n    headers: {\n      'X-Auth-Token': API_TOKEN\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return data;\n  }).then(result => {\n    console.log(\"result teams \", result);\n    const teams = result.teams.map(team => {\n      return {\n        id: team.id,\n        founded: team.founded,\n        name: team.name,\n        crestUrl: team.crestUrl,\n        clubColors: team.clubColors\n      };\n    });\n    return teams;\n  });\n  console.log(\"response teams \", response);\n  return await response;\n};","map":{"version":3,"sources":["D:/__Project/SoccerStat/soccer-stat-app/src/requests/getData.tsx"],"names":["URL_LEAGUES","URL_COMANDS","API_TOKEN","TARIF","getLeagues","response","fetch","method","headers","then","json","data","result","leagues","competitions","map","item","id","name","getMatches","url","year","dateFromTo","filterYear","filterDateFromTo","console","log","dateFrom","dateTo","getTeams","teams","team","founded","crestUrl","clubColors"],"mappings":"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","sourcesContent":["import { URL_LEAGUES, URL_COMANDS, API_TOKEN, TARIF } from \"../constants\"\r\n\r\n// TODO: Убрать все консоль-логи\r\n\r\nexport const getLeagues = async () => {\r\n\r\n\tinterface Leagues {\r\n\t\tid: number | string,\r\n\t\tname: string\r\n\t}\r\n\r\n\tconst response = await fetch(`${URL_LEAGUES}${TARIF}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'X-Auth-Token': API_TOKEN\r\n\t\t}\r\n\t})\r\n\t\t.then(function (response: any) {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(function (data: any) {\r\n\t\t\treturn data;\r\n\t\t})\r\n\t\t.then((result: any) => {\r\n\t\t\tconst leagues = result.competitions.map((item: Leagues) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: item.id,\r\n\t\t\t\t\tname: item.name\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\treturn leagues;\r\n\t\t})\r\n\treturn await response;\r\n}\r\n\r\n\r\nexport const getMatches = async (url: string, id: number | string, year?: any, dateFromTo?: any) => {\r\n\r\n\tlet filterYear = '';\r\n\tlet filterDateFromTo = '';\r\n\r\n\tif (year) {\r\n\t\tconsole.log('getLeague year ', year)\r\n\t\tfilterYear = `?season=${year}`\r\n\t}\r\n\tif (dateFromTo) {\r\n\t\tfilterDateFromTo = `?dateFrom=${dateFromTo.dateFrom}&dateTo=${dateFromTo.dateTo}`\r\n\t}\r\n\r\n\tconst response = await fetch(`${url}${id}/matches${filterYear}${filterDateFromTo}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'X-Auth-Token': API_TOKEN\r\n\t\t}\r\n\t}).then(function (response) {\r\n\t\treturn response.json()\r\n\t}).then(function (data) {\r\n\t\treturn data;\r\n\t})\r\n\treturn await response;\r\n}\r\n\r\n\r\nexport const getTeams = async () => {\r\n\r\n\tinterface Teams {\r\n\t\tid: number | string,\r\n\t\tfounded: number | string,\r\n\t\tname: string,\r\n\t\tcrestUrl: string,\r\n\t\tclubColors: string\r\n\t}\r\n\r\n\tconst response = await fetch(`${URL_COMANDS}${TARIF}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'X-Auth-Token': API_TOKEN\r\n\t\t}\r\n\t}).then(function (response) {\r\n\t\treturn response.json();\r\n\t}).then(function (data) {\r\n\t\treturn data;\r\n\t}).then((result) => {\r\n\t\tconsole.log(\"result teams \", result)\r\n\r\n\t\tconst teams = result.teams.map((team: Teams) => {\r\n\t\t\treturn {\r\n\t\t\t\tid: team.id,\r\n\t\t\t\tfounded: team.founded,\r\n\t\t\t\tname: team.name,\r\n\t\t\t\tcrestUrl: team.crestUrl,\r\n\t\t\t\tclubColors: team.clubColors,\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn teams;\r\n\t})\r\n\r\n\tconsole.log(\"response teams \", response)\r\n\treturn await response;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}